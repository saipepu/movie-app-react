{"version":3,"sources":["Redux/Action/ActioTypes.js","Redux/Action/Actions.js","components/Home/fetchMovieLists.js","components/Home/Header.js","components/Home/Home.js","components/MovieDetail/MovieDetail.js","App.js","Redux/Reducer/Reducers.js","Redux/Reducer/index.js","store.js","index.js"],"names":["actionTypes","fetchAllMovie","title","dispatch","getState","a","search","console","log","undefined","axios","get","response","data","Response","type","payload","movieList","movies","length","Search","localStorage","setItem","JSON","stringify","fetchSelectedMovie","id","addFav","movie","favMovie","fav","MovieLists","useSelector","state","useDispatch","useHistory","getItem","parse","useState","favList","setFavList","handleClick","useEffect","map","removeFav","fontSize","fontWeight","textColor","overflowX","w","h","align","pl","index","direction","to","imdbID","display","minH","marginRight","borderRadius","border","overflow","bgColor","src","Poster","objectFit","maxH","Title","m","onClick","width","justifyContent","Header","movieName","savedName","history","top","position","p","zIndex","textDecoration","initialValues","name","onSubmit","values","actions","setTimeout","setSubmitting","push","props","field","placeholder","colorScheme","isLoading","isSubmitting","Home","movieList1","go","paddingTop","MovieDetail","params","useParams","selectedMovie","allMovieList","len","relatedMovies","i","fetchData","paddingX","maxW","flexDirection","paddingRight","as","ml","Rated","Genre","Runtime","Plot","Writer","Awards","padding","marginY","margin","App","basename","process","path","exact","component","inititalState","Reducers","combineReducers","existedMovie","find","x","list","filter","el","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3862e04a.chunk.js","sourcesContent":["export const actionTypes = {\n    ALLMOVIE: 'ALLMOVIE',\n    SELECTEDMOVIE: 'SELECTEDMOVIE',\n    ADDFAV: 'ADDFAV',\n    REMOVEFAV: 'REMOVEFAV'\n}","import axios from \"axios\";\nimport { actionTypes } from \"./ActioTypes\";\n\nexport const fetchAllMovie = (title) => async (dispatch,getState) => {\n    let search = 'movie'\n    console.log(title)\n    if( title !== undefined){\n        search = title\n    }\n    else{\n        console.log('yes')\n    }\n    const response = await axios.get(`https://www.omdbapi.com/?apikey=89e82956&s=${search}`)\n\n    if(response.data.Response !== 'False'){\n        dispatch({\n            type: actionTypes.ALLMOVIE,\n            payload: response.data\n        })\n    }\n    if(getState().movieList.movies.length > 0){\n        console.log(getState().movieList.movies[0].Search)\n        localStorage.setItem(\"movieList\",JSON.stringify(getState().movieList.movies[0].Search))\n    }\n\n}\n\nexport const fetchSelectedMovie = (id) => async (dispatch) => {\n    const response = await axios.get(`https://www.omdbapi.com/?i=${id}&apikey=89e82956`)\n    dispatch({\n        type: actionTypes.SELECTEDMOVIE,\n        payload: response.data\n    })\n}\nlet id =0;\nexport const addFav = (movie) => async(dispatch,getState) => {\n    console.log(movie)\n    dispatch({\n        type: actionTypes.ADDFAV,\n        payload: movie\n    })\n    console.log(getState().favMovie.fav)\n    localStorage.setItem('favList',JSON.stringify(getState().favMovie.fav))\n\n}\nexport const removeFromFav = (movie) => async(dispatch,getState) => {\n    console.log(movie)\n    dispatch({\n        type: actionTypes.REMOVEFAV,\n        payload: movie\n    })\n    console.log(getState().favMovie.fav)\n    localStorage.setItem('favList',JSON.stringify(getState().favMovie.fav))\n\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch,useSelector } from 'react-redux'; \nimport { addFav, removeFromFav } from '../../Redux/Action/Actions';\nimport { Flex,Box } from '@chakra-ui/layout';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/image';\nimport { Text } from '@chakra-ui/layout';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport { Divider } from '@chakra-ui/layout';\n\nconst MovieLists = () => {\n    let movieList = useSelector((state) => state.movieList.movies)\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    movieList = localStorage.getItem('movieList')\n    movieList = JSON.parse(movieList)\n    console.log(movieList)\n    if( movieList === null){\n        movieList = []\n    }\n\n    const [ favList, setFavList] = useState([])\n    const handleClick = (id) => {\n        dispatch(addFav(id))\n        console.log(id)\n        let data = localStorage.getItem('favList')\n        data = JSON.parse(data)\n        if( data !== '' ){\n            console.log(data)\n            setFavList(data)\n            console.log(favList)\n            console.log('hi')\n        }\n    }\n    useEffect(() => {\n        let data = localStorage.getItem('favList')\n        console.log(data)\n        data = JSON.parse(data)\n\n        if( data !== null){\n\n            console.log(data)\n            data.map(data => {\n                dispatch(addFav(data))\n            })\n            setFavList(data)\n            console.log('hi')\n        }else{\n            data = []\n        }\n    },[])\n\n\n    console.log(favList)\n\n    const removeFav = (id) => {\n        dispatch(removeFromFav(id))\n        console.log(id)\n        let data = localStorage.getItem('favList')\n        data = JSON.parse(data)\n        if( data !== '' || data.length!==0){\n            console.log(data)\n            setFavList(data)\n            console.log(favList)\n            console.log('hi')\n        }\n    }\n\n    return(\n       <>\n       <Text fontSize=\"2em\" fontWeight=\"700\" textColor=\"#fff\">Movies</Text>\n        {movieList === '' || movieList === undefined ? <h1>Loading</h1> :\n                    <Flex overflowX=\"auto\"\n                            w=\"100vw\"\n                            h=\"700px\"\n                            align=\"center\"\n                            pl=\"50px\"\n                    >\n                    {movieList.map((data,index) => {\n                        return (\n                            <Box direction=\"column\" key={index}>\n                                <Link to={`/movieDetail/${data.imdbID}`} key={index} >\n                                    <Flex   display=\"flex\"\n                                            direction=\"column\"\n                                            w={[\"200px\",\"200px\",\"400px\",\"400px\"]}\n                                            h={[\"300px\",\"300px\",\"500px\",\"500px\"]}\n                                            minH=\"fit-content\"\n                                            marginRight=\"60px\"\n                                            borderRadius=\"10px\"\n                                            border=\"1px solid gray\"\n                                            overflow=\"hidden\"\n                                            bgColor=\"#202020\"\n                                    >\n                                        <Image src={data.Poster}\n                                                objectFit=\"cover\"\n                                                minH={[\"250px\",\"250px\",\"400px\",\"400px\"]}\n                                                maxH={[\"250px\",\"250px\",\"400px\",\"400px\"]}\n                                        ></Image>\n                                        <Text fontSize={[\"2em\",\"2em\",\"2.5em\",\"2.5em\"]}\n                                            textColor=\"#ffffff\"\n                                        >{data.Title}</Text>\n                                    </Flex>\n                                </Link>\n                                <Button\n                                            w=\"20%\"\n                                            h=\"30%\"\n                                            minH=\"50px\"\n                                            m=\"20px\"\n                                            fontSize=\"0.5em\"\n                                            onClick={() => handleClick(data)}\n                                        >Watch Later</Button>\n                            </Box>\n                        )\n                    })}\n                    </Flex>\n        }\n        <Divider />\n        <Box textColor=\"#fff\">\n        <Text fontSize=\"2em\" fontWeight=\"700\" textColor=\"#fff\">Favourites</Text>\n\n        \n\n        <Flex overflowX=\"auto\"\n                            w=\"100vw\"\n                            h=\"700px\"\n                            align=\"center\"\n                            pl=\"50px\"\n                    >\n        {\n        favList.map((data,index) => {\n            if( data !== null){\n                return <Box direction=\"column\" key={index}>\n                <Link to={`/movieDetail/${data.imdbID}`} key={index} >\n                    <Flex   display=\"flex\"\n                            direction=\"column\"\n                            w={[\"200px\",\"200px\",\"400px\",\"400px\"]}\n                            h={[\"300px\",\"300px\",\"500px\",\"500px\"]}\n                            minH=\"fit-content\"\n                            marginRight=\"60px\"\n                            borderRadius=\"10px\"\n                            border=\"1px solid gray\"\n                            overflow=\"hidden\"\n                            bgColor=\"#202020\"\n                    >\n                        <Image src={data.Poster}\n                                objectFit=\"cover\"\n                                minH={[\"250px\",\"250px\",\"400px\",\"400px\"]}\n                                maxH={[\"250px\",\"250px\",\"400px\",\"400px\"]}\n                        ></Image>\n                        <Text fontSize={[\"2em\",\"2em\",\"2.5em\",\"2.5em\"]}\n                            textColor=\"#ffffff\"\n                        >{data.Title}</Text>\n                    </Flex>\n                </Link>\n                <Box direction=\"row\" width=\"100%\" justifyContent=\"space-between\">\n                <Button\n                                w=\"20%\"\n                                h=\"30%\"\n                                minH=\"50px\"\n                                m=\"20px\"\n                                fontSize=\"0.5em\"\n                                onClick={() => handleClick(data)}\n                                textColor=\"#000\"\n                    >Add Fav</Button>\n                    <Button\n                                w=\"20%\"\n                                h=\"30%\"\n                                minH=\"50px\"\n                                m=\"20px\"\n                                fontSize=\"0.5em\"\n                                onClick={() => removeFav(data)}\n                                textColor=\"#000\"\n                    >Remove</Button>\n                </Box>\n                \n            </Box>\n            }\n        })\n        }\n        </Flex>\n        </Box>\n\n       </>\n    )\n}\nexport default MovieLists;","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { useDispatch } from 'react-redux';\nimport { fetchAllMovie } from '../../Redux/Action/Actions';\nimport { Flex } from '@chakra-ui/layout';\nimport { Button } from '@chakra-ui/button';\nimport { Text } from '@chakra-ui/layout';\nimport { Formik,Form,Field } from 'formik';\nimport { FormControl } from '@chakra-ui/form-control';\nimport { Input } from '@chakra-ui/input';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\nconst Header = () => {\n    let movieName = \"name\"\n\n    let savedName = localStorage.getItem('movieName')\n    savedName = JSON.parse(savedName)\n    if(savedName !== null){\n        movieName = savedName\n    }\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  return(\n    <>\n    <Flex\n            bgColor=\"gray\"\n            width=\"100vw\"\n            top=\"0\"\n            position=\"fixed\"\n            justifyContent=\"space-between\"\n            align=\"center\"\n            p=\"10px 30px\"\n            zIndex=\"99\"\n        >\n          <Link to=\"/\" textDecoration=\"none\" >\n            <Text fontSize=\"2em\" fontWeight=\"800\" align=\"center\">OMDB</Text>\n          </Link>\n            <Formik initialValues = {{ name: movieName}}\n                    onSubmit={(values,actions) => {\n                        setTimeout(() => {\n                            console.log(values.name)\n                            localStorage.setItem('movieName',JSON.stringify(values.name))\n                            dispatch(fetchAllMovie(values.name))\n                            actions.setSubmitting(false)\n                            history.push(\"/\")\n                        },10)\n                    }}\n            >\n                {(props) => (\n                    <Form>\n                        <Field name=\"name\">\n                            {({ field } ) => (\n                            <FormControl>\n                                <Input {...field} id=\"name\" placeholder=\"movie\"></Input>\n                            </FormControl>\n                            )}\n                        </Field>\n                        <Button\n                            colorScheme=\"teal\"\n                            isLoading={props.isSubmitting}\n                            type=\"submit\">\n                                Search\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n            \n        </Flex>\n    </>\n  )\n}\nexport default Header;","import React,{useState, useEffect} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllMovie } from '../../Redux/Action/Actions';\nimport MovieLists from './fetchMovieLists';\nimport { Box } from '@chakra-ui/layout';\nimport Header from './Header';\nimport { useHistory } from 'react-router';\n\nconst Home = () => {\n    const [ searchTitle, setSearchTitle ] = useState('')\n    let movieList = useSelector((state) => state.movieList.movies)\n    if( movieList === null){\n        movieList = []\n    }\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n    console.log(movieList)\n    let movieName = 'name'\n\n    useEffect(() => {\n        let movieList1 = localStorage.getItem('movieList')\n        movieList1 = JSON.parse(movieList1)\n        movieName = localStorage.getItem('movieName')\n        movieName = JSON.parse(movieName)\n        if( movieList.length !== 0){\n            history.go(0)\n            if( movieList[0].Search[0].Title !== movieList1[0].Title){\n                dispatch(fetchAllMovie(movieName))\n            }\n        }\n    },[movieList])\n\n    //INPUT\n    const handleOnChange = (e) => {\n        setSearchTitle(e.target.value)\n    }\n\n    //SEARCH\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( searchTitle !== ''){\n            dispatch(fetchAllMovie(searchTitle))\n        }\n        setSearchTitle('')\n    }\n\n    return(\n        <Box bgColor='#141414'>\n        <Header />\n        <Box paddingTop={[\"100px\",\"100px\",\"100px\",\"120px\"]}>\n            <MovieLists ></MovieLists>\n        </Box>\n        </Box>\n    )\n}\n\nexport default Home;\n\n{/* <form onSubmit={handleSubmit}>\n                <input type='text' onChange={handleOnChange} value={searchTitle} ></input>\n                <button type='submit'>Search</button>\n        </form> */}","import React,{useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport { fetchSelectedMovie } from '../../Redux/Action/Actions';\nimport { Flex,Box,Text } from '@chakra-ui/layout';\nimport { Divider, Image } from '@chakra-ui/react';\nimport Header from '../Home/Header';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@chakra-ui/button';\nimport { addFav } from '../../Redux/Action/Actions';\nimport { useHistory } from 'react-router';\n\nconst MovieDetail = () => {\n    const [ favList, setFavList] = useState([])\n    const params = useParams();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    let selectedMovie = useSelector((state) => state.selectedMovie)\n\n    let allMovieList = localStorage.getItem('movieList')\n    allMovieList= JSON.parse(allMovieList)\n    let len = allMovieList.length / 2;\n    let relatedMovies = []\n    for(let i=0; i<len; i++){\n        if( allMovieList[i].imdbID !== params.id)\n        relatedMovies[i] = allMovieList[i]\n    }\n\n\n    const fetchData = async(id) => {\n        console.log(id)\n        dispatch(fetchSelectedMovie(id))\n    }\n    useEffect(() => {\n        fetchData(params.id)\n\n    },[params.id])\n    useEffect(() => {\n\n        let data = localStorage.getItem('favList')\n        console.log(data)\n        data = JSON.parse(data)\n        if( data !== null || data.length!==0){\n\n            console.log(data)\n            data.map(data => {\n                dispatch(addFav(data))\n            })\n            setFavList(data)\n            console.log('hi')\n        }else{\n            data = []\n        }\n    },[])\n    const handleClick = (data) => {\n        dispatch(addFav(data))\n        console.log(data.imdbID)\n        \n    }\n    \n    return(\n        <Box bgColor='#141414'>\n        <Header />\n        {selectedMovie === '' || selectedMovie === undefined ? <h1>Loading</h1> : \n           selectedMovie.map((movie,i) => {\n               return(\n                   <Flex \n                        position=\"relative\" \n                        paddingTop={[\"100px\",\"100px\",\"100px\",\"120px\"]} key={i}\n                        w=\"100vw\"\n                        display=\"flex\"\n                        justifyContent=\"space-between\"\n                        paddingX=\"50px\"\n                    >\n                        <Box\n                            maxW=\"50vw\"\n                            display=\"flex\"\n                            flexDirection=\"column\"\n                            justifyContent=\"space-around\"\n                            textColor=\"#fff\"\n                            paddingRight=\"30px\">\n                                <Box>\n                                    <Text fontSize=\"2.8em\" fontWeight=\"800\">{movie.Title}<Text as=\"span\" fontSize=\"18px\" fontWeight=\"300\" ml=\"20px\">(Rating -{movie.Rated})</Text></Text>\n                                    <Text fontSize=\"1.5em\" fontWeight=\"400\">{movie.Genre}</Text>\n                                    <Text fontSize=\"1.5em\" fontWeight=\"400\">{movie.Runtime}</Text>\n\n                                </Box>\n                                <Box>\n                                    <Text fontSize=\"2em\" fontWeight=\"700\">Plot<Text fontSize=\"0.6em\" fontWeight=\"400\">{movie.Plot}</Text></Text>\n                                    <Text fontSize=\"2em\" fontWeight=\"700\">Writer<Text fontSize=\"0.6em\" fontWeight=\"300\">{movie.Writer}</Text></Text>\n                                    <Text fontSize=\"2em\" fontWeight=\"700\">Awards<Text fontSize=\"0.6em\" fontWeight=\"300\">{movie.Awards}</Text></Text>\n                                </Box>\n                        </Box>\n                        \n                       <Box\n                            w=\"50vw\"\n                            h=\"85vh\"\n                            maxW=\"50vw\"\n                            maxH=\"90vh\"\n                            position=\"relative\"\n                            padding=\"50px\"\n                       >\n                            <Image src={movie.Poster}\n                                w=\"100%\"\n                                h=\"100%\"\n                                objectFit=\"cover\"\n                            ></Image>\n                       </Box>\n                   </Flex>\n               )\n           })\n        }\n        <Divider marginY=\"20px\" w=\"80vw\" margin=\"auto\"/>\n        <Flex overflowX=\"auto\"\n                            w=\"100vw\"\n                            h=\"700px\"\n                            align=\"center\"\n                            pl=\"50px\"\n                    >\n        {relatedMovies.map((data,index) => {\n            return (\n                <Box direction=\"column\">\n                <Link to={`/movieDetail/${data.imdbID}`} key={index} >\n                    <Flex   display=\"flex\"\n                            direction=\"column\"\n                            w={[\"200px\",\"200px\",\"400px\",\"400px\"]}\n                            h={[\"300px\",\"300px\",\"500px\",\"500px\"]}\n                            minH=\"fit-content\"\n                            marginRight=\"60px\"\n                            borderRadius=\"10px\"\n                            border=\"1px solid gray\"\n                            overflow=\"hidden\"\n                            bgColor=\"#202020\"\n                    >\n                        <Image src={data.Poster}\n                                objectFit=\"cover\"\n                                minH={[\"250px\",\"250px\",\"400px\",\"400px\"]}\n                                maxH={[\"250px\",\"250px\",\"400px\",\"400px\"]}\n                        ></Image>\n                        <Text fontSize={[\"2em\",\"2em\",\"2.5em\",\"2.5em\"]}\n                            textColor=\"#ffffff\"\n                        >{data.Title}</Text>\n                    </Flex>\n                </Link>\n                <Button\n                            w=\"20%\"\n                            h=\"30%\"\n                            minH=\"50px\"\n                            m=\"20px\"\n                            fontSize=\"0.5em\"\n                            onClick={() => handleClick(data)}\n                        >Watch Later</Button>\n                </Box>\n            )\n        })}\n        </Flex>\n\n        </Box>\n    )\n}\nexport default MovieDetail;","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Home from './components/Home/Home'\nimport MovieDetail from './components/MovieDetail/MovieDetail'\n\nconst App = () => {\n\n    return(\n        <>\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/movieDetail/:id\" component={MovieDetail} />\n            </Switch>\n        </Router>\n        </>\n    )\n}\nexport default App;","import { actionTypes } from \"../Action/ActioTypes\";\n\nconst inititalState = {\n    movies: []\n}\nexport const movieListReducers = ( state = inititalState , { type, payload} ) => {\n    console.log(payload)\n    switch(type){\n        case actionTypes.ALLMOVIE:\n            return{\n                ...state,\n            movies: [payload],\n            }\n        default:\n            return state;\n    }\n}\nexport const selectedMovie = ( state = [], { type, payload} ) => {\n\n    switch(type) {\n        case actionTypes.SELECTEDMOVIE:\n            return[\n                payload,\n            ]\n        default: \n            return state;\n    }\n}\nconst favList = {\n    fav: []\n}\nexport const addFav = (state = favList, {type, payload} ) => {\n    switch(type) {\n        case actionTypes.ADDFAV:{\n            console.log(state.fav)\n            const movie = payload;\n            let existedMovie\n            if(state.fav[0] !== null){\n                console.log('here')\n                existedMovie = state.fav.find((x) => x.imdbID === movie.imdbID)\n            }else{\n                state.fav[0] = []\n            }\n\n\n            if(existedMovie) {\n                console.log('yes')\n                console.log(state.fav)\n                return{\n                    ...state,\n                    fav: state.fav.map((x) => x.imdbID === movie.imdbID ? movie: x)\n                }\n            }else{\n                console.log(movie)\n                return{\n                    ...state,\n                    fav: [...state.fav,movie]\n                }\n            }\n        }\n        case actionTypes.REMOVEFAV:{\n            console.log(payload)\n            const list = state.fav.filter(el => el.imdbID !== payload.imdbID )\n            console.log(list)\n            return(\n                {\n                    fav: list\n                }\n            )\n        }\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport { addFav, movieListReducers , selectedMovie} from \"./Reducers\";\n\nconst Reducers = combineReducers({\n    movieList: movieListReducers,\n    selectedMovie: selectedMovie,\n    favMovie: addFav\n})\nexport default Reducers;","import Reducers from \"./Redux/Reducer\";\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware, compose, createStore  } from \"redux\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(Reducers, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { ChakraProvider } from '@chakra-ui/react'\n\nReactDOM.render(<Provider store={store}><ChakraProvider><App /></ChakraProvider></Provider>,document.getElementById(\"root\"))"],"sourceRoot":""}